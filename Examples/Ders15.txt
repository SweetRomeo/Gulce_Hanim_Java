package csd;

class App {
    public static void main(String [] args)
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);
        System.out.println("Bir şehir giriniz");
        String str = kb.nextLine();

        switch (str){
            case "İstanbul":
            case "istanbul":
                System.out.println("İstanbul şehri");
                break;
            case "İzmir":
            case "izmir":
                System.out.println("izmir şehri");
                break;
            case "Ankara":
            case "ankara":
                System.out.println("Ankara şehri");
                break;
            default:
                System.out.println("Başka bir şehir");
        }
    }
}
//------------------------------------------------------------------
package csd;

class App {
    public static void main(String [] args)
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        switch (val){
            case 11:
                val = (int)Math.pow(val,2);
                System.out.printf("val : %d%n",val);
                break;
            case 21:
                val += 10;
                System.out.printf("val : %d%n",val);
                break;
            case 31:
                val +=4;
                System.out.printf("val : %d%n",val);
                break;
            default:
                val = (int)Math.sqrt(val);
                System.out.printf("val : %d%n",val);
        }

    }
}
//----------------------------------------------------------------------------------------------
package csd;

class App {
    public static void main(String [] args)
    {
        char ch = '|';

        switch (ch){
            case 'A':
            case 'a':
                System.out.println("A");
                break;
            case 'b':
            case 'B':
                System.out.println("B");
                break;
            default:
                System.out.println("Başka bir karakter");
        }

    }
}
//----------------------------------------------------------------
package csd;

class App {
    public static void main(String [] args)
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);
        System.out.println("Bir sayı giriniz?");
        float fval = Float.parseFloat(kb.nextLine());
        System.out.println("Bir sayı giriniz?");
        double dval = Double.parseDouble(kb.nextLine());
        switch (fval){
            case 2.3F:
                System.out.println("2.3");
        }
        switch (dval){
            case 20.5:
                System.out.println("20.5");
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki switch deyiminin if deyimi karşılığı:

	if (postalCode == 67100)
		System.out.println("Zonguldak Bahçelievler Mahallesi");
	else if (postalCode == 34387)
		System.out.println("İstanbul Mecidiyeköy");
	else
		System.out.println("Geçersiz posta kodu");
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
			break;
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
			break;
		default:
			System.out.println("Geçersiz posta kodu");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminin default kısmı olmak zorunda değildir. Aşağıdaki switch deyiminin if deyimi karşılığı şu şekildedir:

	if (postalCode == 67100)
		System.out.println("Zonguldak Bahçelievler Mahallesi");
	else if (postalCode == 34387)
		System.out.println("İstanbul Mecidiyeköy");
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
			break;
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
			break;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde default bölümün yerinin önemi yoktur. Şüphesiz sona koymak iyi bir tekniktir
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		default:
			System.out.println("Geçersiz posta kodu");
			break;
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
			break;
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
			break;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar Notlar: switch deyiminin bölümleri içerisinde (case ve default) çok fazla işlem yapılması okunabilirlik/algılanabilirlik
	açısından iyi bir teknik değildir. Bu durumda metot yazıp ilgili bölümlerde çağırmak gerekir. Bunun için nest bir sınır
	olmasa da 3-4 satırı geçen kodların yazılamaması gerekir.
-----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde case bölümlerine ilişkin ifadeler sabit ifadesi (constant expression) olmalıdır
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		int code = 67100;

		switch (postalCode) {
		case code:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
			break;
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
			break;
		default:
			System.out.println("Geçersiz posta kodu");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde aynı değere sahip birden fazla case bölümü geçersizdir
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
			break;
		case 34387: //error
			System.out.println("İstanbul Mecidiyeköy");
			break;
		case 34388 - 1: //error
			System.out.println("İstanbul Mecidiyeköy");
			break;
		default:
			System.out.println("Geçersiz posta kodu");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde temel türler için tamsayı türleri veya char türü dışında başka bir tür kullanılamaz
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		double postalCode = kb.nextDouble();

		switch (postalCode) {
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
			break;
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
			break;
		default:
			System.out.println("Geçersiz posta kodu");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde aşağı düşme (fall-through) özelliği vardır. Bir case bölümü veya default bölüm yakalandığında
	aşağıya doğru engelleyen herhangi bir deyim görülünceye kadar her deyim çalıştırılır. break deyimi switch deyimini
	sonlandırmak için kullanılır. Bu durumda break deyimi aşağı düşmeyi engeller. Başka engelleyici deyimler de olabilir.
	Aşağıdaki kodu inceleyiniz
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
			//break;
		default:
			System.out.println("Geçersiz posta kodu");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde aşağı düşme (fall-through) özelliği vardır. Bir case bölümü veya default bölüm yakalandığında
	aşağıya doğru engelleyen herhangi bir deyim görülünceye kadar her deyim çalıştırılır. break deyimi switch deyimini
	sonlandırmak için kullanılır. Bu durumda break deyimi aşağı düşmeyi engeller. Başka engelleyici deyimler de olabilir.
	Aşağıdaki kodu inceleyiniz
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		default:
			System.out.println("Geçersiz posta kodu");
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde aşağı düşme (fall-through) özelliği vardır. Bir case bölümü veya default bölüm yakalandığında
	aşağıya doğru engelleyen herhangi bir deyim görülünceye kadar her deyim çalıştırılır. break deyimi switch deyimini
	sonlandırmak için kullanılır. Bu durumda break deyimi aşağı düşmeyi engeller. Başka engelleyici deyimler de olabilir.
	Aşağıdaki kodu inceleyiniz
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Posta kodunu giriniz:");
		int postalCode = kb.nextInt();

		switch (postalCode) {
		default:
			System.out.println("Geçersiz posta kodu");
		case 67100:
			System.out.println("Zonguldak Bahçelievler Mahallesi");
		case 34387:
			System.out.println("İstanbul Mecidiyeköy");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte switch deyiminin aşağı düşme özelliğinden yararlanılmıştır
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Telefon kodunu giriniz:");
		int code = kb.nextInt();

		switch (code) {
		case 212:
			System.out.print("Avrupa ");
		case 216:
			System.out.println("İstanbul");
			break;
		case 372:
			System.out.println("Zonguldak");
			break;
		case 312:
			System.out.println("Ankara");
			break;
		default:
			System.out.println("Geçersiz şehir");
		}
		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte switch deyiminin aşağı düşme özelliğinden yararlanılmıştır. Aşağıdaki örnekteki 212 ve 216 kodları
	için yapılan işlemin daha kısa yapılışı yoktur
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.print("Telefon kodunu giriniz:");
		int code = kb.nextInt();

		switch (code) {
		case 212:
		case 216:
			System.out.println("İstanbul");
			break;
		case 372:
			System.out.println("Zonguldak");
			break;
		case 312:
			System.out.println("Ankara");
			break;
		default:
			System.out.println("Geçersiz şehir");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Basit bir menü uygulamasının iskeleti
	(İleride daha iyisi yazılacaktır)
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		MenuApp.run();
	}
}

class MenuApp {
	public static void printMenu()
	{
		System.out.println("1.Ekle");
		System.out.println("2.Sil");
		System.out.println("3.Güncelle");
		System.out.println("4.Listele");
		System.out.println("5.Çıkış");
		System.out.print("Seçenek:");
	}

	public static void doWorkForInsert()
	{
		System.out.println("---------------------");
		System.out.println("\"Ekle\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForDelete()
	{
		System.out.println("---------------------");
		System.out.println("\"Sil\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForUpdate()
	{
		System.out.println("---------------------");
		System.out.println("\"Güncelle\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForList()
	{
		System.out.println("---------------------");
		System.out.println("\"Listele\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForInvalidOption()
	{
		System.out.println("---------------------");
		System.out.println("Geçersiz seçenek");
		System.out.println("---------------------");
	}

	public static void doWork(int option)
	{
		switch (option) {
		case 1:
			doWorkForInsert();
			break;
		case 2:
			doWorkForDelete();
			break;
		case 3:
			doWorkForUpdate();
			break;
		case 4:
			doWorkForList();
			break;
		default:
			doWorkForInvalidOption();
		}
	}

	public static void doGoodbyeWork()
	{
		System.out.println("Teşekkürler");
		System.out.println("C ve Sistem Programcıları Derneği");
		System.out.println("Tekrar yapıyor musunuz?");
	}

	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			printMenu();
			int option = Integer.parseInt(kb.nextLine());

			if (option == 5)
				break;

			doWork(option);
		}

		doGoodbyeWork();
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Hangi metot içerisinde olursak olalım programı sonlandırmak için System.exit isimli metodu çağırabiliriz. Bu metot
	parametre olarak int türden "çıkış kodu (exit code)" denilen ve program sonlandığında JVM'e oradan da işletim sistemine
	iletilen bir değer alır. Bu değerin çoğu zaman önemi olmaz. Bazı durumlarda okunabilirlik açısından mantıksal başarı veya
	başarısızlığa göre belirlenen değerler argüman olarak verilebilir. main normal sonlandığında JVM'e oradan da işletim
	sistemine sıfır çıkış kodu iletilir. Çıkış kodunun nerelerde kullanıldığı burada ele alınmayacaktır.

	Aşağıdaki örnekte geçersiz giriş durumunda program sonlandırılmıştır. Örnek exit metodunu göstermek amaçlı aşağıdaki
	gibi yazılmıştır
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		LogApp.run();
	}
}

class LogApp {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = kb.nextDouble();

		if (val <= 0) {
			System.out.println("Geçersiz giriş");
			System.exit(1);
		}

		//...
		System.out.printf("log(%f) = %f%n", val, Math.log(val));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Basit bir menü uygulamasının iskeleti
	(İleride daha iyisi yazılacaktır)
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		MenuApp.run();
	}
}

class MenuApp {
	public static void printMenu()
	{
		System.out.println("1.Ekle");
		System.out.println("2.Sil");
		System.out.println("3.Güncelle");
		System.out.println("4.Listele");
		System.out.println("5.Çıkış");
		System.out.print("Seçenek:");
	}

	public static void doWorkForInsert()
	{
		System.out.println("---------------------");
		System.out.println("\"Ekle\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForDelete()
	{
		System.out.println("---------------------");
		System.out.println("\"Sil\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForUpdate()
	{
		System.out.println("---------------------");
		System.out.println("\"Güncelle\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForList()
	{
		System.out.println("---------------------");
		System.out.println("\"Listele\" seçildi");
		System.out.println("---------------------");
	}

	public static void doWorkForInvalidOption()
	{
		System.out.println("---------------------");
		System.out.println("Geçersiz seçenek");
		System.out.println("---------------------");
	}

	public static void doWork(int option)
	{
		switch (option) {
		case 1:
			doWorkForInsert();
			break;
		case 2:
			doWorkForDelete();
			break;
		case 3:
			doWorkForUpdate();
			break;
		case 4:
			doWorkForList();
			break;
		case 5:
			doGoodbyeWork();
		default:
			doWorkForInvalidOption();
		}
	}

	public static void doGoodbyeWork()
	{
		System.out.println("Teşekkürler");
		System.out.println("C ve Sistem Programcıları Derneği");
		System.out.println("Tekrar yapıyor musunuz?");
		System.exit(0);
	}

	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			printMenu();
			doWork(Integer.parseInt(kb.nextLine()));
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden yıl değerinin artık yıl olup olmadığını test eden isLeapYear
	isimli metodu yazınız ve aşağıdaki kod ile test ediniz
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		IsLeapYearTest.run();
	}
}

class IsLeapYearTest {
	public static void run()
	{
		for (int year = 1994; year <= 2104; ++year)
			if (DateUtil.isLeapYear(year))
				System.out.println(year);
	}
}

class DateUtil {
	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	06.11.2022
-----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin geçerli olup olmadığını
	test eden isValidDate isimli metodu yazını ve aşağıdaki kod ile test ediniz
	(İleride daha iyisi yazılacaktır)
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		IsValidDateTest.run();
	}
}

class IsValidDateTest {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			System.out.print("Gün ay ve yıl bilgilerini giriniz:");
			int day = kb.nextInt();
			int month = kb.nextInt();
			int year = kb.nextInt();

			if (day == 0)
				break;

			if (DateUtil.isValidDate(day, month, year))
				System.out.printf("%02d/%02d/%04d tarihi geçerlidir%n", day, month, year);
			else
				System.out.println("Geçersiz tarih");
		}

		System.out.println("Tekrar yapıyor munuz?");
	}
}

class DateUtil {
	public static boolean isValidDate(int day, int month, int year)
	{
		return 1 <= day && day <= 31 && 1 <= month && month <= 12 && day <= getDays(month, year);
	}

	public static int getDays(int month, int year)
	{
		int days = 31;

		switch (month) {
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = 28;
			if (isLeapYear(year))
				++days;
		}

		return days;
	}

	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin aşağıdaki açıklamalara
	göre haftanın hangi gününe geldiğini döndüren getDayOfWeek metodunu yazınız ve aşağıdaki kod ile test ediniz.,
	Açıklamalar:
		- Metot geçersiz bir tarih için -1 değerine geri dönecektir.
		- 01.01.1900 öncesindeki tarihler geçersiz kabul edilecektir
		- Haftanın günü 01.01.1900 ile verilen tarih arasındaki (verilen tarih dahil) gün sayısının 7(yedi) ile
		bölümünden elde edilen kalan alınarak belirlenebilir. Buna göre değer sıfır ise "pazar", 1 ise "pazartesi", ...,
		6 ise "cumartesi" günlerine karşılık gelir
		- Bu metot ile birlikte verilen tarihin hafta sonu olup olmadığını test eden isWeekend ve hafta içi olup olmadığını
		test eden isWeekday metotlarını da yazınız. Bu metotlar tarih geçerlilik kontrolü yapmayacaktır
		- İleride daha iyisi yazılacaktır.
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
    public static void main(String [] args)
    {
           isValidDateTest.run(new java.util.Scanner(System.in));
    }
}

class isValidDateTest{
    public static void run(java.util.Scanner kb)
    {
        for(;;){
            System.out.println("Enter Day?");
            int day = Integer.parseInt(kb.nextLine());
            System.out.println("Enter month?");
            int month = Integer.parseInt(kb.nextLine());
            System.out.println("Enter year?");
            int year = Integer.parseInt(kb.nextLine());
            DateUtil.printDateTR(day,month,year);
        }
    }
}

class DateUtil{
    public static void printDateTR(int day,int month,int year)
    {
        int dayOfWeek = getDayOfWeek(day,month,year);

        if(dayOfWeek == -1)
        {
            System.out.println("Geçersiz Tarih");
            return;
        }

        printDateWithDayOfWeek(day,month,year,dayOfWeek);
    }
    public static void printDateWithDayOfWeek(int day,int month,int year, int dayOfWeek)
    {
        switch (dayOfWeek)
        {
            case 0:
                System.out.printf("%02d.%02d.%04d Pazar\n",day,month,year);
                break;
            case 1:
                System.out.printf("%02d.%02d.%04d Pazartesi\n",day,month,year);
                break;
            case 2:
                System.out.printf("%02d.%02d.%04d Salı\n",day,month,year);
                break;
            case 3:
                System.out.printf("%02d.%02d.%04d Çarşamba\n",day,month,year);
                break;
            case 4:
                System.out.printf("%02d.%02d.%04d Perşembe\n",day,month,year);
                break;
            case 5:
                System.out.printf("%02d.%02d.%04d Cuma\n",day,month,year);
                break;
            case 6:
                System.out.printf("%02d.%02d.%04d Cumartesi\n",day,month,year);
                break;
        }
    }
    public static int getDayOfWeek(int day,int month,int year)
    {
        int totalDays;

        if(year < 1900 || (totalDays = getDayOfYear(day,month,year)) == -1)
            return -1;
        return getTotalDays(year,totalDays) % 7;
    }

    public static int getTotalDays(int year,int totalDays)
    {
        for(int y = 1900;y < year;++y){
            totalDays += 365;
            if(isLeapYear(y))
            {
                totalDays++;
            }
        }
        return totalDays;
    }
    public static int getDayOfYear(int day,int month,int year)
    {
        if(!isValidDate(day,month,year))
        {
            return -1;
        }

        int total = day;

        switch(month - 1){
            case 11:
                total += 30;
            case 10:
                total += 31;
            case 9:
                total += 30;
            case 8:
                total += 31;
            case 7:
                total += 31;
            case 6:
                total += 30;
            case 5:
                total += 31;
            case 4:
                total += 30;
            case 3:
                total += 31;
            case 2:
                total += 28;
                if(isLeapYear(year))
                    ++total;
            case 1:
                total += 31;
        }
        return total;
    }
    public static boolean isValidDate(int day,int month,int year)
    {
        return 1 <= day && day <= 31 && 1 <= month && month <= 12 && day <= getDays(month,year) && year >= 1;
    }

    public static int getDays(int month,int year)
    {
        int days = 31;

        switch (month){
            case 4:
            case 6:
            case 9:
            case 11:
                days = 30;
                break;
            case 2:
                days = 28;
                if(isLeapYear(year))
                    days++;
        }
        return days;
    }

    public static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }
}